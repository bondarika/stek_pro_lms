// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id           Int    @id @default(autoincrement())
  userId       Int    @unique
  user         User   @relation(fields: [userId], references: [id])
  refreshToken String @unique
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  surname            String
  email              String               @unique
  password           String
  codeId             Int
  isActivated        Boolean              @default(false)
  activationLink     String?              @unique
  codes              UserCodes[]
  token              Token?
  UserCourseProgress UserCourseProgress[]
  PasswordResetToken PasswordResetToken[]
}

model Code {
  id         Int         @id @default(autoincrement())
  code       String      @unique
  type       String
  usageLimit Int?
  usedCount  Int         @default(0)
  users      UserCodes[]
  codes      Course[]
}

model Course {
  id    Int     @id @default(autoincrement())
  name  String
  type  String?
  codes Code[]
}

model UserCodes {
  userId Int
  codeId Int
  user   User @relation(fields: [userId], references: [id])
  code   Code @relation(fields: [codeId], references: [id])

  @@id([userId, codeId])
}

model UserCourseProgress {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  module    Int
  lesson    Int
  section   String
  step      Int
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, courseId]) // Один прогресс на одного юзера и курс
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  resetToken String   @unique
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}
